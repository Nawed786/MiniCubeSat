#include <SPI.h>
#include <Wire.h>
#include <SoftwareSerial.h>
#include <LoRa.h>
#include <Adafruit_BMP085.h>
#include <Adafruit_INA219.h>
#include <RTClib.h>

// Create RTC object
RTC_DS3231 rtc;

double lat_val=0.0, lng_val=0.0;

// BMP085 variables:
Adafruit_BMP085 bmp;
float altitude, pressure;
bool bmp_enabled = false;

// TMP100 variables:
#define TMP100_ADDR 0x48 // I2C address of TMP100
float tmpr;
bool tmp100_enabled = false;


Adafruit_INA219 ina219;

const int temt6000 = 34;

void setup()
{
  Serial.begin(115200); 
  while (!Serial);
  Serial.println("CUBEEK Initializing...");

  // communication init:
  LoRa.setPins(5, 16, 2);
  if (!LoRa.begin(433E6))
  {
    Serial.println("Starting LoRa failed!");
    while (1);
  }

  // housekeeping sensor init:
  ina219.begin();

  pinMode(temt6000, INPUT);


  bmp_init();
  tmp100_init(); // Initialize TMP100

   // Initialize I2C communication
  Wire.begin(21, 22); // SDA = GPIO 21, SCL = GPIO 22

//  // Check if the RTC is connected
//  if (!rtc.begin()) {
//    Serial.println("Couldn't find RTC");
//    while (1); // Stop execution if RTC is not found
//  }
//  if (rtc.lostPower()) {
//    Serial.println("RTC lost power, setting the time!");
//    // Set the RTC to the current time if it lost power
//    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
//  }

  
}



void loop()
{

  if (bmp_enabled) readbmp();
  if (tmp100_enabled) readtmp100(); // Read TMP100 data

  sendSensorData();
  delay(1000); // Adjust the delay according to your data sending rate
}



void bmp_init()
{
  bmp_enabled = true;
  if (!bmp.begin())
  {
    Serial.println("Could not find a valid BMP085/BMP180 sensor, check wiring!");
    while (1);
  }
}


void tmp100_init()
{
  tmp100_enabled = true;
  Wire.begin();
  Wire.beginTransmission(TMP100_ADDR);
  Wire.write(0x01); // Configuration register
  Wire.write(0x60); // Set configuration for TMP100 (e.g., 12-bit resolution)
  Wire.endTransmission();
}
/* Initialization Code End!*/

/* TMP100 Reading Function */
void readtmp100()
{
  Wire.beginTransmission(TMP100_ADDR);
  Wire.write(0x00); // Temperature register
  Wire.endTransmission();

  Wire.requestFrom(TMP100_ADDR, 2);
  if (Wire.available() == 2)
  {
    int16_t rawTemp = (Wire.read() << 8) | Wire.read();
    tmpr = rawTemp >> 4; // TMP100 provides 12-bit data
    tmpr *= 0.0625;      // Convert to Celsius
  }
}



float roll= 0.0, pitch = 0.0, yaw = 0.0 ;

void readbmp()
{
  altitude = bmp.readAltitude();
  pressure = bmp.readPressure();
}

/* Sending Sensor Data Function */
void sendSensorData()
{
  float current_mA = ina219.getCurrent_mA();
  float power_mW = ina219.getPower_mW();
  float shuntvoltage = ina219.getShuntVoltage_mV();
  float busvoltage = ina219.getBusVoltage_V();
  float loadvoltage = busvoltage + (shuntvoltage / 1000);

  
  int brightness = analogRead(temt6000);

  String payload = "";
  String housekeeping = "";
  String nav = "";
  String tme= "";

 
 
  payload += tmpr; // TMP100 temperature
  payload += ",";
  payload += brightness;
  payload += ",";
  payload += pressure;
  payload += ",";
  payload += roll;
  payload += ",";
  payload += pitch;
  payload += ",";
  payload += yaw;
  payload += ",";
  payload += altitude;
  payload += ",";

  housekeeping += current_mA;
  housekeeping += ",";
  housekeeping += power_mW;
  housekeeping += ",";
  housekeeping += shuntvoltage;
  housekeeping += ",";
  housekeeping += busvoltage;
  housekeeping += ",";
  housekeeping += loadvoltage;
  housekeeping += ",";

  nav += lat_val;
  nav += ",";
  nav += lng_val;


  Serial.println(payload);
  Serial.println(housekeeping);
  Serial.println(nav);

   // Get the current time
//  DateTime now = rtc.now();
//
//  // Display time in HH:MM:SS format
//  //Serial.print("Current Time: ");
//  Serial.print(now.hour());
//  Serial.print(':');
//  Serial.print(now.minute());
//  Serial.print(':');
//  Serial.println(now.second());
//
//  float hr = now.hour();
//  float mnt = now.minute();
//  float scnd = now.second();
//
//  // Display the date in YYYY-MM-DD format
//  //Serial.print("Current Date: ");
//  Serial.print(now.year());
//  Serial.print('-');
//  Serial.print(now.month());
//  Serial.print('-');
//  Serial.println(now.day());
//
//  float yr = now.year();
//  float mnth = now.month();
//  float dy = now.day();

  

  LoRa.beginPacket();
  LoRa.print(payload);
  LoRa.print(housekeeping);
  LoRa.print(nav);
  LoRa.endPacket();
}
